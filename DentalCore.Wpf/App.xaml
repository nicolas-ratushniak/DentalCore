<Application x:Class="DentalCore.Wpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

             xmlns:views="clr-namespace:DentalCore.Wpf.Views"
             xmlns:viewModels="clr-namespace:DentalCore.Wpf.ViewModels"
             xmlns:controls="clr-namespace:DentalCore.Wpf.Controls"
             xmlns:converters="clr-namespace:DentalCore.Wpf.Converters">

    <Application.Resources>
        <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />

        <Color x:Key="ColorAccent">#5CBAB8</Color>
        <Color x:Key="ColorMinor">#C1F376</Color>
        <!-- <Color x:Key="ColorMinorFocused">#5FC314</Color> -->
        <Color x:Key="ColorMinorFocused">Violet</Color>
        <Color x:Key="GreyColor">#858a8c</Color>
        <Color x:Key="LightGreyColor">#dee0e0</Color>
        <Color x:Key="WarningColor">#f0bf0e</Color>
        <Color x:Key="DangerColor">#F4511E</Color>

        <!--Brushes-->
        <SolidColorBrush x:Key="BrushAccent" Color="{StaticResource ColorAccent}" />
        <SolidColorBrush x:Key="BrushMinor" Color="{StaticResource ColorMinor}" />
        <SolidColorBrush x:Key="BrushMinorFocused" Color="{StaticResource ColorMinorFocused}" />
        <SolidColorBrush x:Key="BrushGrey" Color="{StaticResource GreyColor}" />
        <SolidColorBrush x:Key="BrushLightGrey" Color="{StaticResource LightGreyColor}" />
        <SolidColorBrush x:Key="WarningBrush" Color="{StaticResource WarningColor}" />
        <SolidColorBrush x:Key="DangerBrush" Color="{StaticResource DangerColor}" />

        <!-- Text -->
        <Style x:Key="Title" TargetType="TextBlock">
            <Setter Property="FontSize" Value="32" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style>

        <Style TargetType="TextBlock">
            <Setter Property="FontSize" Value="18" />
        </Style>

        <Style x:Key="ErrorMessage" TargetType="TextBlock">
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Foreground" Value="Crimson" />
            <Setter Property="TextWrapping" Value="Wrap" />
        </Style>

        <Style x:Key="AccentText" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource BrushAccent}" />
            <Setter Property="FontWeight" Value="500" />
            <Setter Property="FontSize" Value="18" />
        </Style>

        <!-- Border -->
        <Style x:Key="NiceBorder" TargetType="Border">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{StaticResource BrushGrey}" />
            <Setter Property="CornerRadius" Value="5" />
            <Setter Property="Padding" Value="5"></Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Buttons -->
        <Style x:Key="NiceButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource BrushAccent}" />
            <Setter Property="Foreground" Value="#FFFFFF" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                Opacity="{TemplateBinding Opacity}"
                                CornerRadius="5">
                            <ContentPresenter Margin="17,7"
                                              HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="0.8" />
                    <Setter Property="Cursor" Value="Hand" />
                </Trigger>

                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.8" />
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="NiceSquareButton" TargetType="Button" BasedOn="{StaticResource NiceButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                                Opacity="{TemplateBinding Opacity}"
                                CornerRadius="0">
                            <ContentPresenter Margin="17,7"
                                              HorizontalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CancelButton" TargetType="Button" BasedOn="{StaticResource NiceButton}">
            <Setter Property="Background" Value="{StaticResource BrushLightGrey}" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontWeight" Value="Regular" />
        </Style>

        <Style x:Key="DangerButton" TargetType="Button" BasedOn="{StaticResource NiceButton}">
            <Setter Property="Background" Value="#ed5b51" />
            <Setter Property="FontWeight" Value="Regular" />
        </Style>


        <!-- RadioButtons -->
        <Style x:Key="NiceRadioButton" TargetType="RadioButton">
            <Setter Property="FontSize" Value="20" />
            <Setter Property="Background" Value="{StaticResource BrushMinor}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border Background="{TemplateBinding Background}"
                                Padding="35,10">
                            <ContentPresenter />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource BrushMinorFocused}" />
                    <Setter Property="Foreground" Value="#FFFFFF" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- TextBox -->
        <Style x:Key="NiceTextBox" TargetType="TextBox">
            <Setter Property="FontSize" Value="18" />
            <Setter Property="BorderBrush" Value="{StaticResource BrushGrey}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="5"
                                Padding="5">
                            <ScrollViewer Name="PART_ContentHost" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- PlaceholderTextBox -->
        <Style TargetType="{x:Type controls:PlaceholderTextBox}">
            <Setter Property="BorderBrush" Value="{StaticResource BrushGrey}" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type controls:PlaceholderTextBox}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="1"
                                CornerRadius="5"
                                Padding="5">
                            <Grid>
                                <TextBlock
                                    Text="{Binding Placeholder, RelativeSource={RelativeSource TemplatedParent}}"
                                    VerticalAlignment="Center"
                                    Margin="3,0,0,0"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Opacity="0.5"
                                    Panel.ZIndex="1"
                                    IsHitTestVisible="False"
                                    Visibility="{Binding IsTyping, RelativeSource={RelativeSource TemplatedParent},
                                    Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                                <TextBox
                                    Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                    VerticalAlignment="Center"
                                    Foreground="{TemplateBinding Foreground}"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    FontSize="{TemplateBinding FontSize}" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Binding views to related view models -->
        <DataTemplate DataType="{x:Type viewModels:PatientsViewModel}">
            <views:PatientsView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:PatientInfoViewModel}">
            <views:PatientInfoView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:PatientCreateViewModel}">
            <views:PatientCreateView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:PatientUpdateViewModel}">
            <views:PatientUpdateView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:VisitsViewModel}">
            <views:VisitsView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:VisitInfoViewModel}">
            <views:VisitInfoView />
        </DataTemplate>

        <DataTemplate DataType="{x:Type viewModels:VisitCreateViewModel}">
            <views:VisitCreateView />
        </DataTemplate>
        
        <DataTemplate DataType="{x:Type viewModels:VisitsExportViewModel}">
            <views:VisitsExportView />
        </DataTemplate>

    </Application.Resources>
</Application>